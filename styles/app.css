html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
  font-family: sans-serif;
}
body {
  max-width: 1200px;
  position: relative;
  left: 50%;
  transform: translateX(-50%);
}
.container {
  height: 100%;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
}
.container p {
  font-size: 0.9em;
  text-align: center;
  color: #888888;
  line-height: 1.2em;
}
.container p button {
  position: relative;
  top: 0;
  left: 0;
}
.container p button:first-of-type {
  color: #298dfd;
}
.container p button:last-of-type {
  color: #fcd261;
}
.match-overlay {
  display: none;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 100;
  background: rgba(0, 0, 0, 0.9);
  text-align: center;
  pointer-events: none;
  transition: opacity 200ms ease;
}
.match-overlay--show {
  display: block;
  pointer-events: all;
}
.match-overlay img:first-of-type {
  margin: 1.5em 0;
  max-width: 90%;
}
.match-overlay img:last-of-type {
  border-style: solid;
  border-width: 2pt;
  border-color: #ffffff;
  border-radius: 200%;
}
.match-overlay p {
  margin: 1em 2em;
  text-align: left;
  color: #ffffff;
}
.match-overlay p .fa-inverse {
  color: #000000;
}
.match-overlay p a {
  color: #ffffff;
  text-decoration: none;
  font-weight: bold;
}
.match-overlay__itsamatch {
  text-align: center !important;
  font-size: 2em !important;
  font-family: serif;
}
.match-overlay__continue {
  position: absolute;
  bottom: 3em;
  left: 50%;
  padding: 0.5em 1em;
  margin: 0 auto;
  border-style: solid;
  border-width: 2pt;
  border-color: #ffffff;
  border-radius: 0.3em;
  color: #fff;
  transform: translate(-50%, 0);
}
.cards {
  position: relative;
  width: 80%;
  height: 70%;
  margin: 0 auto;
  transform: translateY(4%);
}
button {
  position: absolute;
  bottom: 5vw;
  width: 20vw;
  height: 20vw;
  max-width: 100px;
  max-height: 100px;
  padding: 0;
  margin: 0;
  border-style: solid;
  border-width: 7pt;
  border-color: #f1eef7;
  border-radius: 200%;
  background-color: #ffffff;
  background-image: none;
  font-size: 3em;
  line-height: 0;
  cursor: pointer;
}
button .fa {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
button.ok {
  right: 25%;
  font-size: 2.5em;
  color: #64dd9a !important;
}
button.ok .fa {
  transform: translate(-50%, -45%);
}
button.ko {
  left: 25%;
  color: #fe6951 !important;
}
hr {
  margin-bottom: 0;
  border-style: solid;
  border-color: #f1eef7;
  border-width: 2pt;
}
ul {
  margin: 0;
  padding: 0 0 2em 0;
  list-style-type: none;
  text-align: left;
}
ul li {
  display: -ms-flexbox;
  display: flex;
  -ms-flex: none;
      flex: none;
  width: 100%;
  padding: 1em 2em;
  background-color: #fe6951;
  color: #ffffff;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
}
ul li > div {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
  -ms-flex-preferred-size: 70%;
      flex-basis: 70%;
  text-align: left;
}
ul li > div small {
  margin-top: 0.5em;
  font-size: 0.7em;
  line-height: 2em;
}
ul li .fa-inverse {
  color: #000000;
}
ul li a {
  color: #ffffff;
  text-decoration: none;
  font-weight: bold;
}
ul li.ok {
  background-color: #64dd9a;
}
ul li span {
  float: left;
}
ul li img {
  -ms-flex-preferred-size: 30%;
      flex-basis: 30%;
  width: 30vw;
  height: 30vw;
  border-radius: 100%;
}
ul li:nth-of-type(odd) {
  -ms-flex-direction: row;
      flex-direction: row;
  -ms-flex-pack: start;
      justify-content: flex-start;
}
ul li:nth-of-type(odd) img {
  margin-right: 0.5em;
}
ul li:nth-of-type(even) {
  -ms-flex-direction: row-reverse;
      flex-direction: row-reverse;
  -ms-flex-pack: end;
      justify-content: flex-end;
}
ul li:nth-of-type(even) img {
  margin-left: 0.5em;
}
ul li:last-of-type {
  margin-bottom: 1em;
  border-style: solid;
  border-color: #f1eef7;
  border-width: 0 0 2pt 0;
}
.plz,
.about {
  position: absolute;
  bottom: 0.1em;
  color: #888888;
  font-size: 0.7em;
}
.plz {
  right: 0.2em;
}
.about {
  left: 0.2em;
}
.end {
  overflow-y: auto;
}
.end > div {
  text-align: center;
}
.end .plz,
.end .about {
  position: static;
  font-size: 1em;
}
.end .plz {
  float: right;
}
.end .about {
  float: left;
}
a {
  cursor: pointer;
}
@media (min-width: 992px) {
  .container {
    position: relative;
    width: 50%;
    margin: auto;
  }
  .container > .container {
    width: auto;
  }
}
.card {
  display: block;
  position: absolute;
  top: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  transform: scaleX(0.9);
  border-width: 2px;
  border-style: solid;
  border-color: #f1eef7;
  border-radius: 1%;
  background-color: #ffffff;
  transition: all 500ms ease;
}
.card__picture {
  width: 100%;
  height: calc(100% - 3.1em);
  background-position: center;
  background-size: cover;
}
.card__name {
  position: absolute;
  right: 0;
  bottom: 0;
  left: 0;
  height: 3.1em;
  padding: 1em;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
  background-color: #ffffff;
}
.card p {
  margin: 1em 0.5em;
  text-align: left;
}
.card--intro {
  transform: translate(0, -4%);
}
.card--intro p.version {
  position: absolute;
  top: 0;
  right: -0.5em;
  color: #ffffff;
  font-size: 1em;
  text-align: center;
  font-weight: bold;
  -webkit-text-shadow: 1px 1px 4px #000;
  -moz-text-shadow: 1px 1px 4px #000;
  -ms-text-shadow: 1px 1px 4px #000;
  -o-text-shadow: 1px 1px 4px #000;
  text-shadow: 1px 1px 4px #000;
  transform: rotateZ(12deg);
}
card:last-of-type .card {
  transform: translate(0, -4%);
}
card:nth-last-of-type(2) .card {
  transform: translate(0, -2%) scaleX(0.95);
}

/*# sourceMappingURL=data:application/json;base64, */
